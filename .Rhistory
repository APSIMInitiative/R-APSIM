warning(paste("Radiation value of", met@data$radn[i],"is high for", met@data$year[i], met@data$day[i]))
}
}
checkMet(met)
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/LoadAPSIMouts.R')
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/LoadAPSIMouts.R')
tools::checkRdaFiles()
data(Kingsthorpe)
kingsData
data(met)
head(met)
met
unique(met@met$year)
unique(met@data$year)
metFile
metFile()
library(APSIM)
rm(list=ls())
kingsData
prepareMet(kingsData, -27.48, 151.81, newNames=c("Date", "maxt", "mint", "rain", "evaporation", "radn", "vp", "Windrun.km", "RH.at.9am", "SVP.at.9am"))
met <- prepareMet(kingsData, -27.48, 151.81, newNames=c("Date", "maxt", "mint", "rain", "evaporation", "radn", "vp", "Windrun.km", "RH.at.9am", "SVP.at.9am"))
checkMet(met)
insertTavAmp(met)
met <- insertTavAmp(met)
met@tav
loadApsim("C:\\temp\\test", n=10)
loadApsim("C:\\temp\\test", n=10, fill=TRUE)
dir <- "C:\\temp\\test"
n=10
fill=TRUE
wd <- getwd()
setwd(dir)
files <- list.files(dir, paste(ext, "$", sep="")) # create a list of files
if (length(files == 0))
return
ext=".out"
wd <- getwd()
setwd(dir)
files <- list.files(dir, paste(ext, "$", sep="")) # create a list of files
if (length(files == 0))
return
allData <- list(NULL)
fileCount <- 0
for(f in files) {
print(f)
con <- file(f, open="r")
count <- 0
data <- list(NULL)
size <- 1
constants <- NULL
namesFound <- FALSE
unitsFound <- FALSE
while (length(oneLine <- readLines(con, n=1, warn=FALSE)) > 0) {
if(addConstants & grepl("factors = ", oneLine)){ # line contains a single line factor string
oneLine <- stringr::str_replace(oneLine, "factors = ", "")
split <- unlist(strsplit(oneLine, ";", fixed="TRUE"), use.names = FALSE)
for(s in split) {
constants[length(constants) + 1] <- strsplit(s, "=", fixed="TRUE")
}
}else if(addConstants & grepl("=", oneLine)){ # line contains a constant
constants[length(constants) + 1] <- strsplit(oneLine, "=", fixed="TRUE")
} else {
if (!namesFound) { # this line is the column names
colNames <- unlist(strsplit(stringr::str_trim(oneLine), " ", fixed=TRUE), use.names = FALSE)
colNames <- subset(colNames, colNames != "")
namesFound <- TRUE
}else if (!unitsFound) { # this line is the units
units <- unlist(strsplit(stringr::str_trim(oneLine), " ", fixed=TRUE), use.names = FALSE)
units <- subset(units, units != "")
# this shouldn't (but can) happen. e.g. (DECIMAL DEGREES) when reporting lat/lon
if(length(units) != length(colNames)) stop(paste("Error reading", f, "number of columns does match number of headings."))
unitsFound <- TRUE
} else {    # everything else is data
if(count == size) {
length(data) <- size <- size * 2
}
count <- count + 1
sp <- strsplit(oneLine, " ", fixed=TRUE)
dataLine <- unlist(sp, use.names = FALSE)
dataLine <- dataLine[dataLine != ""]
data[[count]] <-  dataLine
}
}
}
close(con)
data <- data[!sapply(data, is.null)]
data <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T), stringsAsFactors=FALSE)
for(c in constants){
data[[ncol(data) + 1]] <- c[2]
colNames[length(colNames) + 1] <- c[1]
}
print(f)
con <- file(f, open="r")
count <- 0
data <- list(NULL)
size <- 1
constants <- NULL
namesFound <- FALSE
unitsFound <- FALSE
while (length(oneLine <- readLines(con, n=1, warn=FALSE)) > 0) {
if(addConstants & grepl("factors = ", oneLine)){ # line contains a single line factor string
oneLine <- stringr::str_replace(oneLine, "factors = ", "")
split <- unlist(strsplit(oneLine, ";", fixed="TRUE"), use.names = FALSE)
for(s in split) {
constants[length(constants) + 1] <- strsplit(s, "=", fixed="TRUE")
}
}else if(addConstants & grepl("=", oneLine)){ # line contains a constant
constants[length(constants) + 1] <- strsplit(oneLine, "=", fixed="TRUE")
} else {
if (!namesFound) { # this line is the column names
colNames <- unlist(strsplit(stringr::str_trim(oneLine), " ", fixed=TRUE), use.names = FALSE)
colNames <- subset(colNames, colNames != "")
namesFound <- TRUE
}else if (!unitsFound) { # this line is the units
units <- unlist(strsplit(stringr::str_trim(oneLine), " ", fixed=TRUE), use.names = FALSE)
units <- subset(units, units != "")
# this shouldn't (but can) happen. e.g. (DECIMAL DEGREES) when reporting lat/lon
if(length(units) != length(colNames)) stop(paste("Error reading", f, "number of columns does match number of headings."))
unitsFound <- TRUE
} else {    # everything else is data
if(count == size) {
length(data) <- size <- size * 2
}
count <- count + 1
sp <- strsplit(oneLine, " ", fixed=TRUE)
dataLine <- unlist(sp, use.names = FALSE)
dataLine <- dataLine[dataLine != ""]
data[[count]] <-  dataLine
}
}
}
close(con)
data <- data[!sapply(data, is.null)]
data <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T), stringsAsFactors=FALSE)
for(c in constants){
data[[ncol(data) + 1]] <- c[2]
colNames[length(colNames) + 1] <- c[1]
}
addConstants <- TRUE
print(f)
con <- file(f, open="r")
count <- 0
data <- list(NULL)
size <- 1
constants <- NULL
namesFound <- FALSE
unitsFound <- FALSE
while (length(oneLine <- readLines(con, n=1, warn=FALSE)) > 0) {
if(addConstants & grepl("factors = ", oneLine)){ # line contains a single line factor string
oneLine <- stringr::str_replace(oneLine, "factors = ", "")
split <- unlist(strsplit(oneLine, ";", fixed="TRUE"), use.names = FALSE)
for(s in split) {
constants[length(constants) + 1] <- strsplit(s, "=", fixed="TRUE")
}
}else if(addConstants & grepl("=", oneLine)){ # line contains a constant
constants[length(constants) + 1] <- strsplit(oneLine, "=", fixed="TRUE")
} else {
if (!namesFound) { # this line is the column names
colNames <- unlist(strsplit(stringr::str_trim(oneLine), " ", fixed=TRUE), use.names = FALSE)
colNames <- subset(colNames, colNames != "")
namesFound <- TRUE
}else if (!unitsFound) { # this line is the units
units <- unlist(strsplit(stringr::str_trim(oneLine), " ", fixed=TRUE), use.names = FALSE)
units <- subset(units, units != "")
# this shouldn't (but can) happen. e.g. (DECIMAL DEGREES) when reporting lat/lon
if(length(units) != length(colNames)) stop(paste("Error reading", f, "number of columns does match number of headings."))
unitsFound <- TRUE
} else {    # everything else is data
if(count == size) {
length(data) <- size <- size * 2
}
count <- count + 1
sp <- strsplit(oneLine, " ", fixed=TRUE)
dataLine <- unlist(sp, use.names = FALSE)
dataLine <- dataLine[dataLine != ""]
data[[count]] <-  dataLine
}
}
}
close(con)
data <- data[!sapply(data, is.null)]
data <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T), stringsAsFactors=FALSE)
for(c in constants){
data[[ncol(data) + 1]] <- c[2]
colNames[length(colNames) + 1] <- c[1]
}
colNames <- stringr::str_trim(colNames)
names(data) <- colNames
data$fileName <- f
allData[[length(allData) + 1]] <- data
fileCount <- fileCount + 1
allData <- list(NULL)
fileCount <- 0
for(f in files) {
print(f)
con <- file(f, open="r")
count <- 0
data <- list(NULL)
size <- 1
constants <- NULL
namesFound <- FALSE
unitsFound <- FALSE
while (length(oneLine <- readLines(con, n=1, warn=FALSE)) > 0) {
if(addConstants & grepl("factors = ", oneLine)){ # line contains a single line factor string
oneLine <- stringr::str_replace(oneLine, "factors = ", "")
split <- unlist(strsplit(oneLine, ";", fixed="TRUE"), use.names = FALSE)
for(s in split) {
constants[length(constants) + 1] <- strsplit(s, "=", fixed="TRUE")
}
}else if(addConstants & grepl("=", oneLine)){ # line contains a constant
constants[length(constants) + 1] <- strsplit(oneLine, "=", fixed="TRUE")
} else {
if (!namesFound) { # this line is the column names
colNames <- unlist(strsplit(stringr::str_trim(oneLine), " ", fixed=TRUE), use.names = FALSE)
colNames <- subset(colNames, colNames != "")
namesFound <- TRUE
}else if (!unitsFound) { # this line is the units
units <- unlist(strsplit(stringr::str_trim(oneLine), " ", fixed=TRUE), use.names = FALSE)
units <- subset(units, units != "")
# this shouldn't (but can) happen. e.g. (DECIMAL DEGREES) when reporting lat/lon
if(length(units) != length(colNames)) stop(paste("Error reading", f, "number of columns does match number of headings."))
unitsFound <- TRUE
} else {    # everything else is data
if(count == size) {
length(data) <- size <- size * 2
}
count <- count + 1
sp <- strsplit(oneLine, " ", fixed=TRUE)
dataLine <- unlist(sp, use.names = FALSE)
dataLine <- dataLine[dataLine != ""]
data[[count]] <-  dataLine
}
}
}
close(con)
data <- data[!sapply(data, is.null)]
data <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T), stringsAsFactors=FALSE)
for(c in constants){
data[[ncol(data) + 1]] <- c[2]
colNames[length(colNames) + 1] <- c[1]
}
colNames <- stringr::str_trim(colNames)
names(data) <- colNames
data$fileName <- f
allData[[length(allData) + 1]] <- data
fileCount <- fileCount + 1
if (fileCount == n) break
}
allData <- allData[!sapply(allData, is.null)]
allData <- ifelse(returnFrame, as.data.frame(data.table::rbindlist(allData, fill=fill)), data.table::rbindlist(allData, fill=fill))
returnFrame=T
allData <- ifelse(returnFrame, as.data.frame(data.table::rbindlist(allData, fill=fill)), data.table::rbindlist(allData, fill=fill))
ncol(allData)
allData <- list(NULL)
fileCount <- 0
for(f in files) {
print(f)
con <- file(f, open="r")
count <- 0
data <- list(NULL)
size <- 1
constants <- NULL
namesFound <- FALSE
unitsFound <- FALSE
while (length(oneLine <- readLines(con, n=1, warn=FALSE)) > 0) {
if(addConstants & grepl("factors = ", oneLine)){ # line contains a single line factor string
oneLine <- stringr::str_replace(oneLine, "factors = ", "")
split <- unlist(strsplit(oneLine, ";", fixed="TRUE"), use.names = FALSE)
for(s in split) {
constants[length(constants) + 1] <- strsplit(s, "=", fixed="TRUE")
}
}else if(addConstants & grepl("=", oneLine)){ # line contains a constant
constants[length(constants) + 1] <- strsplit(oneLine, "=", fixed="TRUE")
} else {
if (!namesFound) { # this line is the column names
colNames <- unlist(strsplit(stringr::str_trim(oneLine), " ", fixed=TRUE), use.names = FALSE)
colNames <- subset(colNames, colNames != "")
namesFound <- TRUE
}else if (!unitsFound) { # this line is the units
units <- unlist(strsplit(stringr::str_trim(oneLine), " ", fixed=TRUE), use.names = FALSE)
units <- subset(units, units != "")
# this shouldn't (but can) happen. e.g. (DECIMAL DEGREES) when reporting lat/lon
if(length(units) != length(colNames)) stop(paste("Error reading", f, "number of columns does match number of headings."))
unitsFound <- TRUE
} else {    # everything else is data
if(count == size) {
length(data) <- size <- size * 2
}
count <- count + 1
sp <- strsplit(oneLine, " ", fixed=TRUE)
dataLine <- unlist(sp, use.names = FALSE)
dataLine <- dataLine[dataLine != ""]
data[[count]] <-  dataLine
}
}
}
close(con)
data <- data[!sapply(data, is.null)]
data <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T), stringsAsFactors=FALSE)
for(c in constants){
data[[ncol(data) + 1]] <- c[2]
colNames[length(colNames) + 1] <- c[1]
}
colNames <- stringr::str_trim(colNames)
names(data) <- colNames
data$fileName <- f
allData[[length(allData) + 1]] <- data
fileCount <- fileCount + 1
if (fileCount == n) break
}
allData[1]
allData[2]
allData[13]
allData[12]
allData[11]
allData
allData[1]
allData[2]
allData[3]
allData[2]
allData[4]
allData[5]
ncol(allData[1])
ncol(allData[2])
ncol(allData[[2]])
ncol(allData[[1]])
ncol(allData[[3]])
ncol(allData[[10]])
ncol(allData[[11]])
allData <- allData[!sapply(allData, is.null)]
ncol(allData[[10]])
ncol(allData[[9]])
fill
data.table::rbindlist(allData, fill=fill)
allData <- ifelse(returnFrame, as.data.frame(data.table::rbindlist(allData, fill=fill)), data.table::rbindlist(allData, fill=fill))
allData <- list(NULL)
fileCount <- 0
for(f in files) {
print(f)
con <- file(f, open="r")
count <- 0
data <- list(NULL)
size <- 1
constants <- NULL
namesFound <- FALSE
unitsFound <- FALSE
while (length(oneLine <- readLines(con, n=1, warn=FALSE)) > 0) {
if(addConstants & grepl("factors = ", oneLine)){ # line contains a single line factor string
oneLine <- stringr::str_replace(oneLine, "factors = ", "")
split <- unlist(strsplit(oneLine, ";", fixed="TRUE"), use.names = FALSE)
for(s in split) {
constants[length(constants) + 1] <- strsplit(s, "=", fixed="TRUE")
}
}else if(addConstants & grepl("=", oneLine)){ # line contains a constant
constants[length(constants) + 1] <- strsplit(oneLine, "=", fixed="TRUE")
} else {
if (!namesFound) { # this line is the column names
colNames <- unlist(strsplit(stringr::str_trim(oneLine), " ", fixed=TRUE), use.names = FALSE)
colNames <- subset(colNames, colNames != "")
namesFound <- TRUE
}else if (!unitsFound) { # this line is the units
units <- unlist(strsplit(stringr::str_trim(oneLine), " ", fixed=TRUE), use.names = FALSE)
units <- subset(units, units != "")
# this shouldn't (but can) happen. e.g. (DECIMAL DEGREES) when reporting lat/lon
if(length(units) != length(colNames)) stop(paste("Error reading", f, "number of columns does match number of headings."))
unitsFound <- TRUE
} else {    # everything else is data
if(count == size) {
length(data) <- size <- size * 2
}
count <- count + 1
sp <- strsplit(oneLine, " ", fixed=TRUE)
dataLine <- unlist(sp, use.names = FALSE)
dataLine <- dataLine[dataLine != ""]
data[[count]] <-  dataLine
}
}
}
close(con)
data <- data[!sapply(data, is.null)]
data <- data.frame(matrix(unlist(data), nrow=length(data), byrow=T), stringsAsFactors=FALSE)
for(c in constants){
data[[ncol(data) + 1]] <- c[2]
colNames[length(colNames) + 1] <- c[1]
}
colNames <- stringr::str_trim(colNames)
names(data) <- colNames
data$fileName <- f
allData[[length(allData) + 1]] <- data
fileCount <- fileCount + 1
if (fileCount == n) break
}
backup <- allData
allData <- allData[!sapply(allData, is.null)]
data.table::rbindlist(allData, fill=fill)
data.table::rbindlist(allData, fill=fill)
as.data.frame(data.table::rbindlist(allData, fill=fill))
test <- as.data.frame(data.table::rbindlist(allData, fill=fill))
test <- ifelse(returnFrame, as.data.frame(data.table::rbindlist(allData, fill=fill)), data.table::rbindlist(allData, fill=fill))
returnFrame
test <- as.data.frame(data.table::rbindlist(allData, fill=fill))
if(returnFrame)
test <- as.data.frame(data.table::rbindlist(allData, fill=fill))
if(returnFrame){
test <- as.data.frame(data.table::rbindlist(allData, fill=fill))
} else {
test <- data.table::rbindlist(allData, fill=fill))
}
if(returnFrame){
test <- as.data.frame(data.table::rbindlist(allData, fill=fill))
} else {
test <- data.table::rbindlist(allData, fill=fill))
if(returnFrame){
test <- as.data.frame(data.table::rbindlist(allData, fill=fill))
} else {
test <- data.table::rbindlist(allData, fill=fill)
}
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/LoadAPSIMouts.R')
test <- loadApsim("C:\\temp\\test", fill=TRUE)
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/LoadAPSIMouts.R')
test <- loadApsim("C:\\temp\\test", fill=TRUE, n=10)
test <- loadApsim("C:\\temp\\test", fill=TRUE, n=20)
test <- loadApsim("C:\\temp\\test", fill=TRUE)
str(met)
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/LoadAPSIMouts.R')
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/LoadAPSIMouts.R')
rm(list=ls())
library(APSIM)
data(met)
checkMet(met)
insertTavAmp(met)
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/LoadAPSIMouts.R')
loadApsim("c:\\temp\\test, n=20, fill=TRUE)
loadApsim("c:\\temp\\test", n=20, fill=TRUE)
test<-loadApsim("c:\\temp\\test", n=20, fill=TRUE)
test<-loadApsim("c:\\temp\\test\\Continuous Wheat_0019.out", n=20, fill=TRUE, loadAll=FALSE)
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/LoadAPSIMouts.R')
test<-loadApsim("c:\\temp\\test\\Continuous Wheat_0019.out", n=20, fill=TRUE, loadAll=FALSE)
test<-loadApsim("c:\\temp\\test", n=20, fill=TRUE)
test<-loadApsim("c:\\temp\\test", n=20)
test<-loadApsim("c:\\temp\\test", n=20, fill=TRUE, addConstants=FALSE)
warnings()
head(test)
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/LoadAPSIMouts.R')
test<-loadApsim("c:\\temp\\test", n=20, fill=TRUE, addConstants=FALSE)
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/LoadAPSIMouts.R')
test<-loadApsim("c:\\temp\\test", n=20, fill=TRUE, addConstants=FALSE)
head(test)
head(loadApsim("c:\\temp\\test", n=20, fill=TRUE, addConstants=TRUE))
head(loadApsim("c:\\temp\\test", n=20, fill=TRUE, addConstants=FALSE))
head(loadApsim("c:\\temp\\test\\Continuous Wheat_0012.out", n=20, loadAll=FALSE, fill=TRUE, addConstants=FALSE))
head(loadApsim("c:\\temp\\test\\Continuous Wheat_0012.out", n=20, loadAll=FALSE, fill=TRUE))
met <- loadMet("C:/temp/weather.met")
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
met <- loadMet("C:/temp/weather.met")
stringr::str_locate(oneLine, fixed("[weather"))
oneLine<-"foo"
stringr::str_locate(oneLine, fixed("[weather"))
stringr::str_locate(oneLine, stringr::fixed("[weather"))
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
met <- loadMet("C:/temp/weather.met")
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
met <- loadMet("C:/temp/weather.met")
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
met <- loadMet("C:/temp/weather.met")
met <- loadMet("C:/temp/weather.met")
head(met)
head(met$data)
head(met@data)
str(met)
data(Kingsthorpe)
prepareMet(kingsData, -27.48, 151.81, newNames=c("Date", "maxt", "mint", "rain", "evaporation", "radn", "vp", "Windrun.km", "RH.at.9am", "SVP.at.9am"))
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
writeMetFile("c:\\temp\\met.met",met)
remove.packages("XLConnect", lib="~/R/win-library/3.2")
remove.packages("XLConnectJars", lib="~/R/win-library/3.2")
remove.packages("rJava", lib="~/R/win-library/3.2")
install.packages("readxl")
library(APSIM)
xltest <- read_excel("C:\\Users\\fai04d\\OneDrive\\APSIM training materials\\Advanced - Scenario\\data.xlsx")
library(readxl)
xltest <- read_excel("C:\\Users\\fai04d\\OneDrive\\APSIM training materials\\Advanced - Scenario\\data.xlsx")
xltest <- read_excel("C\\temp\weather.xlsx")
xltest <- read_excel("C\\temp\\weather.xlsx")
xltest <- read_excel("C:\\temp\\weather.xlsx")
head xltest
head (xltest)
str (xltest)
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
library(APSIM)
library("APSIM", lib.loc="~/R/win-library/3.2")
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
library(APSIM)
update.packages()
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
library(APSIM)
install.packages("digest")
install.packages("RCurl")
update.packages()
update.packages()
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
source('C:/Users/fai04d/OneDrive/R Packages/APSIM/R/MetFunctions.R')
library(APSIM)
curve(0.5*x^0.3+.15*5+0.05,0,150)
devtools::build()
library(APSIM)
